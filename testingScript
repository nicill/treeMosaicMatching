# /usr/bin/bash


fixed=$1
moving=$2
whatToDo=$3
prefix=$4
methodsJumbled=$5
criteriaJumbled=$6

existingMethods="bef rig aff dem0 dem1 dem2 bsp syn orb kaz bri "
#existingCriteria="jmhi mmi msq cc orb kaz bri"
existingCriteria="jmhi mmi msq cc kaz"

currentDir=$(pwd)
partialFileDir=$currentDir/"tempOutput/"
mkdir $partialFileDir

#indicate methods to be used 
methodString=""
for m in $existingMethods
do
	if [[ $methodsJumbled == *$m* ]]; then
		methodString=$methodString" "$m
	fi
done

if [[ $methodsJumbled == *"all"* ]];then
  methodString=$existingMethods
fi


#indicate methods to be used
criteriaString=""
for c in $existingCriteria
do
	if [[ $criteriaJumbled == *$c* ]]; then
		criteriaString=$criteriaString" "$c
	fi
done

if [[ $criteriaJumbled == *"all"* ]];then
  criteriaString=$existingCriteria
fi

# Codify the actions that the script will perform
compute=0
evaluate=0
gatherResults=0
shutdown=0
if [[ $whatToDo == *"c"* ]]; then
compute=1
fi
if [[ $whatToDo == *"e"* ]]; then
evaluate=1
fi
if [[ $whatToDo == *"g"* ]]; then
gatherResults=1
fi
if [[ $whatToDo == *"s"* ]]; then
shutdown=1
fi

if [[ $compute = 1 ]];then
	echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++testing Script, Computing START, methods $methodString $criteriaString"


	#in any case, do rigid registration to initialize
	python mosaicRegistererImageMethods.py $fixed $moving "Initialtranf$prefix"".txt" coarseRegOutput"$prefix"".tif" 0

	# now set the output of the rigid registration as the new moving image.
	moving=coarseRegOutput"$prefix"".tif"


	for method in $methodString 
	do
		START=$(date +%s)


		if [[ $method = bef ]];then
			#in this case, the output is just the input
			cp $moving out"$prefix""$method"".tif"
		elif [[ $method = rig ]] 
		then
			python mosaicRegistererImageMethods.py $fixed $moving "tranf$prefix"".txt" out"$prefix""$method"".tif" 0
		elif [[ $method = aff ]] 
		then
			#cp coarseRegOutput"$prefix"".tif" out"$prefix""$method"".tif"
			python mosaicRegistererImageMethods.py $fixed $moving "tranf$prefix"".txt" out"$prefix""$method"".tif" 1
		elif [[ $method = dem0 ]] 
		then
			python mosaicRegistererImageMethods.py $fixed $moving "tranf$prefix"".txt" out"$prefix""$method"".tif" 2
		elif [[ $method = dem1 ]] 
		then
			python mosaicRegistererImageMethods.py $fixed $moving "tranf$prefix"".txt" out"$prefix""$method"".tif" 3
		elif [[ $method = dem2 ]] 
		then
			python mosaicRegistererImageMethods.py $fixed $moving "tranf$prefix"".txt" out"$prefix""$method"".tif" 4
		elif [[ $method = bsp ]] 
		then
			python mosaicRegistererImageMethods.py $fixed $moving "tranf$prefix"".txt" out"$prefix""$method"".tif" 5
		elif [[ $method = syn ]] 
		then
			python mosaicRegistererImageMethods.py $fixed $moving "tranf$prefix"".txt" out"$prefix""$method"".tif" 6
		elif [[ $method = orb ]] #not otputting matches image (parameter5 in featureDescriptorMatching.py
		then
			python featureDescriptorMatching.py $fixed $moving 0 "tranf$prefix"".txt" out"$prefix""$method"".tif" 
		elif [[ $method = kaz ]] #not otputting matches image (parameter5 in featureDescriptorMatching.py
		then
			python featureDescriptorMatching.py $fixed $moving 1 "tranf$prefix"".txt" out"$prefix""$method"".tif" 
		elif [[ $method = bri ]] #not otputting matches image (parameter5 in featureDescriptorMatching.py
		then
			python featureDescriptorMatching.py $fixed $moving 2 "tranf$prefix"".txt" out"$prefix""$method"".tif" 
		fi

		END=$(date +%s)
		DIFF=$(( $END - $START ))

		echo "$method finished in $DIFF seconds"
	done
fi

#"jmhi mmi msq cc orb kaz bri"

if [[ $evaluate = 1 ]];then
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Testing Script, Evaluate START"
	for method in $methodString 
	do

		for criterion in $criteriaString 
		do

			START=$(date +%s)
	
			rm $partialFileDir"result"$prefix$method$criterion".txt"
			echo "evaluating Criterion $criterion for method $method"
			if [[ $criterion = jmhi ]];then
				python imageMetrics.py $fixed out"$prefix""$method"".tif" 0  >> $partialFileDir"result"$prefix$method$criterion".txt"
			elif [[ $criterion = mmi ]] 
			then
				python imageMetrics.py $fixed out"$prefix""$method"".tif" 1 >> $partialFileDir"result"$prefix$method$criterion".txt"
		
			elif [[ $criterion = msq ]] 
			then
				python imageMetrics.py $fixed out"$prefix""$method"".tif" 2 >> $partialFileDir"result"$prefix$method$criterion".txt"
			elif [[ $criterion = cc ]] 
			then
				python imageMetrics.py $fixed out"$prefix""$method"".tif" 3 >> $partialFileDir"result"$prefix$method$criterion".txt"
			elif [[ $criterion = orb ]] 
			then
				python featureMatcherDistance.py $fixed out"$prefix""$method"".tif" 0 >> $partialFileDir"result"$prefix$method$criterion".txt"
			elif [[ $criterion = kaz ]] 
			then
				python featureMatcherDistance.py $fixed out"$prefix""$method"".tif" 1 >> $partialFileDir"result"$prefix$method$criterion".txt"
			elif [[ $criterion = bri ]] 
			then
				python featureMatcherDistance.py $fixed out"$prefix""$method"".tif" 2 >> $partialFileDir"result"$prefix$method$criterion".txt"
			fi
			END=$(date +%s)
			DIFF=$(( $END - $START ))

			echo "$criterion finished in $DIFF seconds"

		done

	done
fi


if [[ $gatherResults = 1 ]];then
#cd $dataDir
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Testing Script, GatherResults START"
rm "summary"$prefix".txt"
echo "Criterion $methodString"> "summary"$prefix".txt"

for criterion in $criteriaString 
do
	echo "Starting gathering results for criterion $criterion within $criteriaString"
	# First, list all patients 
	#echo "$methodString"> $prefix"criterion"$criterion".txt"

	#now, for each method, iterate over all results
	echo -n "$criterion " >> $prefix"criterion"$criterion".txt"
	for method in $methodString 
	do
		echo "Starting Method $method within $methodString"

 		cat $partialFileDir"result"$prefix$method$criterion".txt" >> $prefix"criterion"$criterion".txt"

	done
		echo "" >> $prefix"criterion"$criterion".txt"

	cat $prefix"criterion"$criterion".txt" >> "summary"$prefix".txt"
	rm $prefix"criterion"$criterion".txt"	

done

fi






	# copy to dropbox
	#cp $outputFilePrefix"criterion"$criterion".txt" $remoteResultsDir/"Iterations"$iterations$methodsJumbled"criterion"$criterion".txt" 

